** 寄存器说明
| 寄存器 | 说明                                                                                                 |
|--------+------------------------------------------------------------------------------------------------------|
| CS     | 寄存器保存段地址                                                                                     |
| IP     | 偏移地址                                                                                             |
| AX     | 累积暂存器                                                                                           |
| BX     | 基底暂存器                                                                                           |
| CX     | 计数暂存器                                                                                           |
| DX     | 资料暂存器                                                                                           |
| SI     | 来源索引暂存器                                                                                       |
| DI     | 目的索引暂存器                                                                                       |
| SP     | 堆顶暂存器                                                                                           |
| BP     | 基底暂存器                                                                                           |
| EAX    | 累加器,是ax的延伸,为32位                                                                             |
| EBX    | 基地址(base)寄存器,在内存寻址时存放基地址                                                            |
| ECX    | 计数器,重复REP前缀指令和LOOP指令的内定计数器                                                         |
| EDX    | 总是用来放整数除法产生的余数                                                                         |
| EBP    | 基址指针(base pointer),经常用作函数调用框架(frame pointer)                                           |
| ESP    | 堆栈指针,称为栈顶指针，堆栈顶部是地址小的区域,压入堆栈数据越多,ESP越小,在32位平台上,ESP每次减少4字节 |
| EIP    | 存入下一个CPU指令存放的内存地址,当CPU执行完当前指令后,从EIP寄存器中读取下一条指令内存地址，继续执行                                              |
** 指令说明
| 指令         | 说明                      |
|--------------+---------------------------|
| movl 1, %eax | 将1传送到eax寄存器        |
| pop %eax     | 将栈顶数据弹出至eax寄存器 |
|              |                           |
** 技巧
*** esp,ebp偏移标记方法
  如果将add()函数的栈顶位置标记为%esp,如果整个add()方法栈空间是16字节,按照每4个字节为单元进行划分,
那么,其栈空间可分4个:
| 位置                 | 说明 |
|----------------------+------|
| %ebp                 |      |
| 12(%esp) 或-4(%ebp)  |    0 |
| 8(%esp)  或-8(%ebp)  |    1 |
| 4(%esp)  或-12(%ebp) |    2 |
| %esp                 |    3 |
** 常用的汇编代码
*** 标准函数起始代码
#+BEGIN_SRC 
pushl %ebp  ;保存调用者栈基地址
movl %esp, %ebp ;将调用者栈基地址指向其栈顶
subl $32, %esp ;将当前栈顶减去32字节长度
#+END_SRC
linux平台上,栈是向下增长的,从内存高地址往低地址方向增长,每调用新函数需要为新函数分配栈空间,新函数栈顶相对调用者的栈顶,
内存地址一定是低位方向












