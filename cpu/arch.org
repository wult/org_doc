** 名词解释
*** 指令操作数
#+BEGIN_EXAMPLE
格式:
标签(label) : 助词参数1 参数2 参数3
例如:
LOADREG: MOV EAX,SUBTOTA`
#+END_EXAMPLE
*** 分段寻址
处理器支持分段寻址.分段寻址是指程序可以有多个独立的寻址空间,叫做段.比如一个程序可以把它的指令和堆栈分别保存在独立段中，代码地址总是指向代码段,堆栈地址总是指向栈空间.
#+BEGIN_EXAMPLE
格式:
段寄存器: 字节地址
例子:下面段地址代表DS寄存器指向的段中FF79H地址
DS:FF79H
#+END_EXAMPLE
** 系统架构概况
IA-32系统级架构是由寄存器,数据结构和指令组成.这些指令是用来支持系统操作比如内存管理,中断处理,任务管理,多处理器控制
[[file:images/cpu_base_img.png]]
*** 全局和局部描述符表
    保护模式下操作，所有内存访问要么通过全局描述符表(GDT)要么通过局部描述符表(LDT).
#+BEGIN_EXAMPLE
段选择符: 包含了GDT或LDT里的索引,全局/局部标志和访问特权信息.
#+END_EXAMPLE
*** 系统段,段描述符和门
    除代码,数据,堆栈段构成程序运行环境外，系统架构还定义两个系统段: 任务状态段(TSS)和LDT(GDT不被看作段，因为它不能通过段选择和段描述符访问).这些段类型有专门描述符.
    系统架构定义一套门的描述符(调用门,中断门,陷阱门和任务门),这些门提供访问运行在不同应用程序特权级的系统过程和处理程序的方法.
*** 任务状态段和任务门
#+BEGIN_EXAMPLE
TSS定义了任务执行环境的状态,包括通用寄存器,段寄存器,EFLAGS 寄存器,EIP寄存器和段选择符以及三个堆栈段(特权0,1,2各一个)的指针状态.它也包括了与任务相应的LDT的选择符和页表的基地址
#+END_EXAMPLE    
    当前任务的TSS的段选择符保存在任务寄存器中.切换到一个任务最简单的方法是进行CALL或JMP到那个任务中.
- 保存当前TSS中当前任务状态
- 装载新任务段选择符的任务寄存器
- 通过GDT中段选择符访问新的TSS
- 将新的TSS中新任务的状态装载到通用寄存器,段寄存器,LDTR,控制寄存器CR3(页表基地址),EFLAGS寄存器和EIP寄存器
- 开始执行新任务
*** 中断和异常处理
IDT包含访问中断和异常处理程序的门的描述表集合.IDT的线性基地址包含在IDT寄存器(IDTR).IDT中门描述符包括有中断-,陷阱-，或任务门类型.在运行中断或异常处理程序时，处理器必须先从内部硬件,外部中断控制器,或通过执行INT,INT0,INT3或BOUND指令软件中断向量(中断数字).中断向量包含IDT中的门描述符索引,如果选中的门描述符是一个中断门或陷阱门，相应的处理程序是通过非常类似于通过调用门调用过程，如果描述符是一个任务门，处理程序通过任务切换进行的.
*** 内存管理 
  系统架构支持直接物理地址内存或虚拟内存(通过分页).当直接物理地址时,线性地址就是物理地址,当使用分页时，所有代码，堆栈,系统段,GDT，IDT都可以将最近访问访问过页驻留在内存中而进行分页(页框).页在物理内存的位置保存在两个类型的系统数据结构中(页目录和页表),这两个数据结构都保存物理内存中.页目录包含有页表的物理地址，访问特权，内存管理信息，页表中包含有页框的物理地址，访问特权和内存管理信息,页表中包含有页框的物理地址,访问特权，内存管理信息.页目录的基地址保存在控制寄存器CR3中。为了使用分页机制，一个线性地址分为三部分:页目录，页表，页框中的
