#+OPTIONS: ^:{} H:5 num:t
* linux加载到main的过程
    从开机到main函数执行分为三步,目的是从启动盘加载操作系统程序,完成main函数所需的准备工作.
- 启动bios,准备实模式下中断向量表和中断服务程序
- 从启动盘加载操作系统程序到内存
- 为执行32的main函数做过渡工作
*** 启动BIOS,准备实模式下的中断向量表和中断服务程序
**** BIOS启动原理
   x86分 *16位实模式* 和 *32位保护模式* ,为了兼容最开始的启动问题,所有x86的cpu加电就进入16位实模式(寻址范围0x00000到0xFFFFF),且CPU硬件逻辑设计为加电瞬间强行将CS(代码段寄存器的地址)值设置为0XF000,IP(偏移地址)值为0xFFF0,这样CS:IP就指向0xFFFF0(CS<<4+IP),这个地址是BIOS程序的范围.
#+BEGIN_SRC 
 以8K的BIOS为例子,在系统总线所占的地址段为0xFE000~0xFFFFF.
#+END_SRC 
**** BIOS在内存中加载中断向量表和中断服务程序
    #+BEGIN_SRC 
    BIOS程序在内存最开始的位置（0x00000）用1 KB的内存空间（0x00000～0x003FF）构建中断向量表，在紧挨着它的位置用256字节的内存空间构建BIOS数据区（0x00400～0x004FF），并在大约57 KB以后的位置（0x0E05B）加载了8 KB左右的与中断向量表相应的若干中断服务程序。图1-2中精确地标注了这些位置。
    中断向量表中有256个中断向量，每个中断向量占4字节，其中两个字节是CS的值，两个字节是IP的值。每个中断向量都指向一个具体的中断服务程序。
    #+END_SRC 
*** 加载操作系统内核程序并为保护模式做准备
     对于Linux 0.11操作系统而言，计算机将分三批逐次加载操作系统的内核代码。第一批由BIOS中断int 0x19把第一扇区bootsect的内容加载到内存；第二批、第三批在bootsect的指挥下，分别把其后的4个扇区和随后的240个扇区的内容加载至内存。
**** 加载第一部分内核代码--引导程序
  计算机硬件体系结构的设计与BIOS联手操作，会让CPU接收到一个int 0x19中断。CPU接收到这个中断后，会立即在中断向量表中找到int 0x19中断向量值: 0x0E6F2。根据这个值可以在中断服务程序找到准确位置
  按照这个简单、“生硬”的规则，int 0x19中断向量所指向的中断服务程序，即启动加载服务程序，将软驱0盘面的0磁道1扇区的内容复制至内存0x07C00处
  这个扇区里的内容就是Linux 0.11的引导程序，也就是我们将要讲解的bootsect，其作用就是陆续把软盘中的操作系统程序载入内存。这样制作的第一扇区就称为启动扇区（boot sector）第一扇区中的程序由bootsect.s中的汇编程序汇编而成.
 #+BEGIN_SRC 
 中断向量表（Interrupt Vector Table）：实模式中断机制的重要组成部分，记录所有中断号对应的中断服务程序的内存地址。
 中断服务（Interrupt Service）程序：通过中断向量表的索引对中断进行响应服务，是一些具有特定功能的程序。
 #+END_SRC
**** 加载第二部分内核代码--setup
***** bootsect对内存的规划 
 BIOS已经把bootsect也就是引导程序载入内存了，现在它的作用就是把第二批和第三批程序陆续加载到内存中。为了把第二批和第三批程序加载到内存中的适当位置，bootsect首先做的工作就是规划内存
 #+BEGIN_SRC 
 //代码路径：boot/bootsect.s
 ...
	 .equ SYSSIZE, 0x3000
	 .equ SETUPLEN, 4		; nr of setup-sectors,需要加载的扇区数
	 .equ BOOTSEG, 0x07c0		; original address of boot-sector,启动扇区被BIOS加载到的位置 
	 .equ INITSEG, 0x9000		; we move boot here - out of the way,BOOTSEG将要移动到的新位置
	 .equ SETUPSEG, 0x9020		; setup starts here,setup被加载到位置
	 .equ SYSSEG, 0x1000		; system loaded at 0x10000 (65536),内核被加载的位置
	 .equ ENDSEG, SYSSEG + SYSSIZE	; where to stop loading,内核末尾位置
	 .equ ROOT_DEV, 0x306 ;根文件系统设备号
 ...
 #+END_SRC
 [[file:./img/bootsect_def.jpg]]
***** 复制 bootsect
   bootsect启动程序将它自身（全部的512 B内容）从内存0x07C00（BOOTSEG）处复制至内存0x90000（INITSEG）处
  #+BEGIN_SRC 
 //boot/bootsect.s
 start：
 mov ax，#BOOTSEG
 mov ds,ax
 mov ax，#INITSEG
 mov es,ax
 mov cx，#256
 sub si,si
 sub di,di
 rep
 movw
  #+END_SRC
 在这次复制过程中，ds（0x07C0）和si（0x0000）联合使用，构成了源地址0x07C00；es（0x9000）和di（0x0000）联合使用，构成了目的地址0x90000（见图1-6），而mov cx，#256这一行循环控制量，提供了需要复制的“字”数（一个字为2字节，256个字正好是512字节，也就是第一扇区的字节数）。

 通过代码我们还可以看出，图1-5提到的BOOTSEG和INITSEG现在开始发挥作用了。注意，此时CPU的段寄存器（CS）指向0x07C0（BOOTSEG），即原来bootsect程序所在的位置。
 开始时bootsect“被迫”加载到0x07C00位置。现在将自身移至0x90000处，说明操作系统开始根据自己的需要安排内存了
***** 将setup程序加载到内存中
 执行int 0x13指令，产生0x13中断，通过中断向量表找到这个中断服务程序，将软盘第二扇区开始的4个扇区，即setup.s对应的程序加载至内存的SETUPSEG（0x90200）处。复制后的bootsect的起始位置是0x90000，占用512字节的内存空间。不难看出0x90200紧挨着bootsect的尾端，所以bootsect和setup是连在一起的,操作系统已经从软盘中加载了5个扇区的代码。等bootsect执行完毕后，setup这个程序就要开始工作了.
**** 加载第三部分内核代码--system模块
较突出的特点是这次加载的扇区数是240个.
第三批程序已经加载完毕，整个操作系统的代码已全部加载至内存。bootsect的主体工作已经做完了，还有一点小事，就是要再次确定一下根设备号
 Linux 0.11的启动需要两部分数据，即系统内核镜像和根文件系统
 setup程序现在开始执行。它做的第一件事情就是利用BIOS提供的中断服务程序从设备上提取内核运行所需的机器系统数据，其中包括光标位置、显示页面等数据，并分别从中断向量0x41和0x46向量值所指的内存地址处获取硬盘参数表1、硬盘参数表2，把它们存放在0x9000：0x0080和0x9000：0x0090处
 动扇区bootsect程序刚结束其使命，执行setup时立刻就将其用数据覆盖
*** 开始向32 位模式转变,为main函数的调用做准备
操作系统要使计算机在32位保护模式下工作。这期间要做大量的重建工作，并且持续工作到操作系统的main函数的执行过程中
**** 关中断并将system移动到内存地址起始位置 0x00000
将CPU的标志寄存器（EFLAGS）中的中断允许标志（IF）置0。这意味着，程序在接下来的执行过程中，无论是否发生中断，系统都不再对此中断进行响应
#+BEGIN_SRC 
关中断（cli）和开中断（sti）操作将在操作系统代码中频繁出现，其意义深刻。慢慢的你会发现，cli、sti总是在一个完整操作过程的两头出现，目的是避免中断在此期间的介入。接下来的代码将为操作系统进入保护模式做准备。此处即将进行实模式下中断向量表和保护模式下中断描述符表（IDT）的交接工作。试想，如果没有cli，又恰好发生中断，如用户不小心碰了一下键盘，中断就要切进来，就不得不面对实模式的中断机制已经废除、保护模式的中断机制尚未完成的尴尬局面，结果就是系统崩溃。cli、sti保证了这个过程中，IDT能够完整创建，以避免不可预料中断的进入造成IDT创建不完整或新老中断机制混用。甚至可以理解为cli、sti是为了保护一个新的计算机生命的完整而创建的。
#+END_SRC
setup程序做了一个影响深远的动作：将位于0x10000的内核程序复制至内存地址起始位置0x00000处
0x00000这个位置原来存放着由BIOS建立的中断向量表及BIOS数据区。这个复制动作将BIOS中断向量表和BIOS数据区完全覆盖，使它们不复存在。直到新的中断服务体系构建完毕之前，操作系统不再具备响应并处理中断的能力
#+BEGIN_SRC 
这样做能取得“一箭三雕”的效果：
1）废除BIOS的中断向量表，等同于废除了BIOS提供的实模式下的中断服务程序。
2）收回刚刚结束使用寿命的程序所占内存空间。
3）让内核代码占据内存物理地址最开始的、天然的、有利的位置
#+END_SRC
**** 设置中断描述符表和全局描述符表
setup程序继续为保护模式做准备。此时要通过setup程序自身提供的数据信息对中断描述符表寄存器（IDTR）和全局描述符表寄存器（GDTR）进行初始化设置。
#+BEGIN_SRC 
GDT（Global Descriptor Table，全局描述符表），在系统中唯一的存放段寄存器内容（段描述符）的数组，配合程序进行保护模式下的段寻址。它在操作系统的进程切换中具有重要意义，可理解为所有进程的总目录表，其中存放每一个任务（task）局部描述符表（LDT,Local Descriptor Table）地址和任务状态段（TSS,Task Structure Segment）地址，完成进程中各段的寻址、现场保护与现场恢复。
GDTR（Global Descriptor Table Register,GDT基地址寄存器），GDT可以存放在内存的任何位置。当程序通过段寄存器引用一个段描述符时，需要取得GDT的入口，GDTR标识的即为此入口。在操作系统对GDT的初始化完成后，可以用LGDT（Load GDT）指令将GDT基地址加载至GDTR。
IDT（Interrupt Descriptor Table，中断描述符表），保存保护模式下所有中断服务程序的入口地址，类似于实模式下的中断向量表。
IDTR（Interrupt Descriptor Table Register,IDT基地址寄存器），保存IDT的起始地址。
#+END_SRC
#+BEGIN_EXAMPLE
32位的中断机制和16位的中断机制，在原理上有比较大的差别。最明显的是16位的中断机制用的是中断向量表，中断向量表的起始位置在0x00000处，这个位置是固定的；32位的中断机制用的是中断描述符表（IDT），位置是不固定的，可以由操作系统的设计者根据设计要求灵活安排，由IDTR来锁定其位置。
GDT是保护模式下管理段描述符的数据结构，对操作系统自身的运行以及管理、调度进程有重大意义，后面的章节会有详细讲解。
因为，此时此刻内核尚未真正运行起来，还没有进程，所以现在创建的GDT第一项为空，第二项为内核代码段描述符，第三项为内核数据段描述符，其余项皆为空。
IDT虽然已经设置，实为一张空表，原因是目前已关中断，无需调用中断服务程序。此处反映的是数据“够用即得”的思想。
创建这两个表的过程可理解为是分两步进行的：
1）在设计内核代码时，已经将两个表写好，并且把需要的数据也写好。
2）将专用寄存器（IDTR、GDTR）指向表。
此处的数据区域是在内核源代码中设定、编译并直接加载至内存形成的一块数据区域。专用寄存器的指向由程序中的lidt和lgdt指令完成，具体操作见图1-18。
值得一提的是，在内存中做出数据的方法有两种：
1）划分一块内存区域并初始化数据，“看住”这块内存区域，使之能被找到；
2）由代码做出数据，如用push代码压栈，“做出”数据。
#+END_EXAMPLE

