* 编译与链接
** 生成可执行程序过程
 - 预处理
 - 编译
 - 汇编
 - 链接
*** 模块拼装--静态链接
     链接过程包括:地址和空间分配,符号决议,重定位
     符号决议也叫:符号绑定 ,名称绑定,地址绑定,指令绑定.
* 目标文件里有什么
** 目标文件的格式
    windows下的PE(Portable Executable)和Linux的ELF (Executable Linkable Format),它们都是COFF(Common file format)格式的变种.
* 可执行文件的装载与进程
** 进程虚拟地址空间
每个程序运行起来后，将拥有自己的独立 *虚拟地址空间* ,这个虚拟地址空间由计算机硬件平台决定.
C程序中的指针所占的空间来计算虚拟地址空间的大小.
32位平台下4GB虚拟空间不能任意使用，因为程序处于操作系统监控下，进程只能使用那些操作系统分配给进程地址，
linux将进程虚拟地址空间分配为1G为系统使用，3GB用户使用.
** 装载的方式
*** 覆盖装入
*** 页映射
** 从操作系统角度看可执行文件的装载
*** 进程的建立
操作系统角度看，一个进程最关键特征是拥有独立的虚拟地址空间.创建一个进程，装载可执行文件并且执行.最开始只需要做三件事:
- 创建一个独立的虚拟地址空间
  一个虚拟空间由一组页映射函数将虚拟空间各个页映射到相应的物理空间,创建虚拟空间实际是创建映射函数所需要的相应数据结构.在linux下创建虚拟地址空间实际上只是分配一个页目录
- 读取可执行文件头,并且建立虚拟空间与可执行文件映射关系
  上一步是页映射关系函数是虚拟空间到物理内存的映射关系。这步所做的是虚拟空间与可执行文件的映射关系.linux将进程虚拟空间中的一个段叫虚拟内存区域(VMA),操作系统创建进程后，会在进程相应的数据结构中设置一个.text段的VMA
- 将CPU指令寄存器设置成可执行文件的入口地址,启动运行
  操作系统通过设置CPU的指令寄存器将控制权转交给进程.它涉及内核堆栈和用户堆栈切换,CPU运行权限切换.
