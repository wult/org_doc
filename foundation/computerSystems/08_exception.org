* 异常控制流
    从给处理器加电开始,直到断电为止，程序计数器假设一个值的序列:
    
    a_0,a_1,...,a_n-1

    其中,每个a_k是某个相应指令I_k的地址.每个从a_k到a_k+1的过渡为控制转移(flow of control或control flow)
    
    现代系统通过使控制发生突变来对这些情况做出反应。我们把这些突变称为异常控制流(Exceptional Control Flow,ECF)
    
    理解ECF很重要:
- 理解ECF将帮助你理解重要的系统概念. ECF是操作系统用来实现IO，进程和虚拟存储器基本机制。
- 理解ECF将帮助你理解应用程序是如何与操作系统交互的.应用程序通过使用一个叫 陷阱 (trap)或者系统调用(system call)的ECF形式,向操作系统请求服务.比如向磁盘写数据，从网络读取数据，创建一个新进程,以及终止当前进程，都是通过应用程序调用系统调用来实现。
- 理解ECF将帮助你编写有趣的新应用程序。 操作系统为应用程序提供了强大ECF机制，用来创建新进程，等待进程终止，通知其他进程系统中异常事件，以及检测和响应这些事件。如果理解ECF机制，那么你就能用它们来编写UNIX外壳和web服务器。
- 理解ECF将帮助你理解并发 ECF是计算机系统中实现并发的基本机制，中断应用程序，进程和线程（它们执行在时间上是重叠的）执行的异常处理程序和中断应用程序执行的信号处理程序都是运行中的并发例子.
- 理解ECF将帮助你理解软件异常如何工作.像c++和java这样的语言通过try,catch以及throw语句提供软件异常机制，软件异常允许程序进行非本地跳转（违反通过的调用/返回栈规则的跳转）来响应错误情况.非本地跳转是一种应用层的ECF，在C中是通过setjmp和longjmp函数提供的。理解这些低级函数将帮助你理解高级软件异常如何得以实现。
** 异常
  异常是异常控制流的一种形式，它一部分是由硬件实现的，一部分是由操作系统实现的。

  *异常* 是控制流中突变，用来响应处理器状态中某些变化。当处理器状态中发生一个重要的变化时，处理器正在执行某个当前指令I_curr。在处理器中，状态被编码为不同的位和信号，状态变化称为事件,事件可能和当前指令的执行直接相关。比如发生虚拟存储器缺页，算术溢出，或者一条指令试图除以0,另一方面，事件也可能和当前指令的执行没有关系。比如一个系统定时器产生信号或者一个IO请求完成。
当处理器检测到有事件发生，它会通过一张叫做异常表(exception table)的跳转表，进行一个间接过程调用(异常)，到一个专门设计用来处理这类事件的操作系统子程序(异常处理程序(exception handle))
 
  当异常处理程序完成处理后，根据引起异常的事件类型,会发生以下三种情况:
- 处理程序将控制返回给当前指令I_curr,即当事件发生时正在执行的指令。
- 处理程序将控制返回给I_next,即如果没有发生异常将会执行下一条指令
- 处理程序终止被中断程序
*** 异常处理
  系统中可能的每种类型的异常都分配一个唯一的非负整数的异常号(exception number).其中一些号码是由处理器的设计者分配的，其他号码是由操作系统内核(操作系统常驻存储器的部分)的设计者分配的.前者示例包括0除，缺页，存储器访问违例，断点，后者包括系统调用来自外部IO设备信号

  在系统启动时，操作系统分配和初始化一张称为异常表的跳转表，使得条目k包含异常k的处理程序地址。

  异常表的起始地址放在异常表基址寄存器(ETBR)的特殊CPU寄存器里.


