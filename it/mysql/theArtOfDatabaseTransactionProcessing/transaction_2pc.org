#+OPTIONS: ^:nil
** 简介
*** 系统锁: 是保护共享的内存数据结构 不被并发的session同时修改.如各种MUTEX(如trx_sys->mutex,事务锁管理需要使用的lock_sys->mutex,回滚段内存结构管理需要使用rseg->mutex)
*** 事务锁: 用户 SQL执行过程中,保护用户表中数据不被并发的session同时修改,如我们常提及的读锁,写锁,意向锁.事务锁是事务并发访问控制技术中基于技术中基于锁的并发控制技术所指的锁。
** 锁的概述
   从技术本质上看，加锁操作就是为特定对象设置一个标志位,然后 使用锁机制(对象上存在标志位则不能改写,放弃加锁请求或等待锁释放后再进行操作)和释放锁
   锁的另外一层含义是抑制并发,保护共享资源即在抑制并发。
*** 全局锁表
  全局锁表: 1 元数据锁表;2行级锁表
 Mysql Server层提供了一个全局的元数据锁表"MDL_map_ m_locks",用以处理DDL之间的并发,处理DDL和DML之间的并发,并发冲突根源在于对于数据的竞争 
**** 第一阶段,初始化,Mysql Server 层会初始化出两个全局变量,InnoDB初始化一个全局变量:
 -  Mysql Server 层初始化出一个个全局事务管理器,对系统全局事务进行管理，如一致性读要使用MVCC管理器,回滚段等.
 -  Mysql Server层初始化出另一个全局中的元数据锁表，对系统全部元素锁进行管理.其中 Hash表"m_locks"上注册了全部元数据(GLOBAL和COMMIT元数据锁除外)
-   InnoDB 层初始化出一个全局行级锁表,对InnoDB层内全部行级锁进行管理，包括记录锁,谓词锁,谓词页锁,其中 lock_sys上有三个hash表，注册了全部各类型的行级锁
**** 第二阶段 运行态.接受用户sql语句，进行语法分析，得到sql语句的加锁语义
- 如果是DDL语句,则交给MYSQL SERVER 层处理，对应的锁是元数据锁
- 如果是DML或DQL语句，则交给InnoDB层处理,对应的锁是行级锁
**** 第三阶段 结束 有两层含义 1. 事务结束 需要释放锁(体现两阶段锁的思想),2.数据库引擎系统结束，释放系统资源包括释放锁
*** MDL_request 来自SQL语句语义的加锁请求,不同的sql语句暗含不同的加锁语义,语义解析阶段即把加锁语义分析获得
- MDL_request : 每个会话即用户连接(物理线程)上存在一个元数据锁的上下文，用以表示本会话生命周期内(实则是本会话的当前事务生命期内)的各种锁的施加,获得等情况
- MDL_ticket: 表示接收到加锁申请,加锁者买到一张ticket,但需要准备接受安检,安检结果是: 一个加锁请求即MDL_request对象来临后，锁被授予也可以被拒绝(被拒绝则发出加锁请求会话处于等待设置其MDL_context上的"m_wait"),如果被授予,则生成一个MDL_lock对象,绑定在MDL_ticket对象上,此时加锁请求完成.
** 系统锁
   InnoDB提供两种系统锁,用于多线程间同步与互斥。第一是读写锁,使用读锁和写锁实现互斥并发会话对同一个内存的对象(如数据缓存区)的修改操作.第二是mutex锁,利用操作系统的mutex功能对共享对象加锁,以完全互斥的方式保护内存中的数据结构.
*** 读写锁
    InnoDB提供一种自施锁,是基于操作系统的Test-And-Sety原子指令实现.称为read-write-lock
#+BEGIN_SRC plantuml :file images/transaction_2pc_rw_lock_t.png :cmdline -charset utf-8
class rw_lock_t {
    volatile lintlock_work;//锁的值,真正的记录锁的状态标志变量,读写锁设置不同值
    volatile ulint waiters;//谁在等待本锁
    volatile ibool recursive;//number of granted SX locks
    volatile os_thread_id_t writer_thread;//写操作的线程ID
    os_event_t event;//os事件
    os_event_t wait_ex_event;//下一个写操作等待者正
    mutable imutex_tmutex;//mutex锁
    UT_LIST_NODE_T(rw_lock_t) list;//所有读写锁list
}

enum rw_lock_type_t {
  RW_S_LATCH = 1,//共享锁
	RW_X_LATCH = 2,//排它锁
	RW_SX_LATCH = 4,//意向排它锁,阻塞写操作,不阴塞读操作
	RW_NO_LATCH = 8 //没有锁

}
#+END_SRC
读销可以有多个施加者,写锁只有一个施加者,排它锁/写锁,写操作加x锁,本类在sync0rw.h
*** 读写锁的创建与释放见rw_lock_create_func()
** 记录锁的基本数据结构
*** 锁的粒度
    InnoDB的事务锁,支持四种基本的锁
#+BEGIN_SRC plantuml :file images/transaction_lock_mode.png :cmdline -charset utf-8
enum lock_mode {
	LOCK_IS = 0,	/* intention shared 意向共享锁*/ 
	LOCK_IX,	/* intention exclusive 意向排它锁*/
	LOCK_S,		/* shared 共享锁*/
	LOCK_X,		/* exclusive 排它锁*/
	LOCK_AUTO_INC,	//自增锁
	LOCK_NONE,	//
	LOCK_NUM = LOCK_NONE, /* number of lock modes */
	LOCK_NONE_UNSET = 255
}

#+END_SRC
*** 锁的种类
#+BEGIN_SRC 
##见lock0lock.h
#define LOCK_ORDINARY	0	/*!< this flag denotes an ordinary
				next-key lock in contrast to LOCK_GAP
				or LOCK_REC_NOT_GAP */
//间隙锁记录之前的间隙被锁定,阻止记录被修改,也阻止记录前间歇被插入
#define LOCK_GAP	512	/*!< when this bit is set, it means that the
				lock holds only on the gap before the record;
				for instance, an x-lock on the gap does not
				give permission to modify the record on which
				the bit is set; locks of this type are created
				when records are removed from the index chain
				of records */
//记录被锁定,记录之前的间隙不被锁定
#define LOCK_REC_NOT_GAP 1024	/*!< this bit means that the lock is only on
				the index record and does NOT block inserts
				to the gap before the index record; this is
				used in the case when we retrieve a record
				with a unique key, and is also used in
				locking plain SELECTs (not part of UPDATE
				or DELETE) when the user has set the READ
				COMMITTED isolation level */
//插入意见锁        
#define LOCK_INSERT_INTENTION 2048 /*!< this bit is set when we place a waiting
				gap type record lock request in order to let
				an insert of an index record to wait until
				there are no conflicting locks by other
				transactions on the gap; note that this flag
				remains set when the waiting lock is granted,
				or if the lock is inherited to a neighboring
				record */
#define LOCK_PREDICATE	8192	/*!< Predicate lock */
#define LOCK_PRDT_PAGE	16384	/*!< Page lock */


#+END_SRC
*** 锁的基本结构
#+BEGIN_SRC plantuml :file images/transaction_lock_t.png :cmdline -charset utf-8
class lock_t <<struct>>{
  trx_t*		trx;		/*!< transaction owning the lock */
	UT_LIST_NODE_T(lock_t) trx_locks;	//事务已经申请到的事务锁双向列表
	dict_index_t*	index;/*!< index for a record lock */
	lock_t*		hash;	
  lock_table_t tab_lock;//表锁 union
  lock_table_t rec_lock;//记录锁 union 表或记录锁只能两选一

}
#+END_SRC
*** 显示锁与隐匿锁
**** 显示锁
使用lock tables操作过程中使用的锁
**** 隐匿锁
     InnoDB实现的一种延迟加锁的机制,用来减少加锁的数量.
***** InnoDB隐匿锁必是排它锁
***** 对于隐式排它锁,不能锁定间隙只能锁定(索引上的)记录.这是因为陈式锁是针对被修改的记录(属于Record类型),所以不能有间隙(GAP),如果间隙位(gap bit)被置位,锁只能加在间隙上.
***** INSERT操作会在记录系统写入trx_id,根据lock_clust_rec_some_has_impl()函数判断,这种情况下只能用隐式锁
** 记录锁
*** 记录锁的数据结构
#+BEGIN_SRC plantuml :file images/transaction_lock_rec_t.png :cmdline -charset utf-8
class lock_rec_t <<struct>> {
	ib_uint32_t	space;		/*!< space id */
	ib_uint32_t	page_no;	/*!< page number */
	ib_uint32_t	n_bits;		/*!< number of bits in the lock
}
#+END_SRC
本结构体之后紧跟着一个位图,标记了一个页面中有哪些记录被加锁,这说明锁不是施加在记录上，而是施加在页面 上.
*** 记录锁的生命周期
    记录锁的初始化: lock_t* RectLock::lock_alloc()
    记录锁被使用完毕后,随着事务结束,被lock_release()->lock_rec_dequeue_from_page()释放
*** 锁的施加
#+BEGIN_SRC 
lock_clust_rec_read_check_and_lock();//因为读操作在主键索引记录上加记录锁
lock_clust_rec_modify_check_and_lock();//国为修改(更新,删除)操作主键索引记录上加记录锁
lock_sec_rec_read_check_and_lock();//因为读操作在二级索引上加记录锁
lock_sec_rec_modify_check_and_lock();//因为修改操作在二级索引上加记录锁
#+END_SRC
** SQL语义定义锁
   MYSQL 上层是Server,提供词法分析,语法分析,SQL优化和执行器的执行框架,InnoDB就是负责事务和存储的插件

   对于事务的处理,并不是简单地交由各个插件独立处理,而是在Mysql Server层开始,就做了宏观的规定,这些规定落在thr_lock.h,thr_lock.c,handler.cc,handler.h这些文件中
*** 锁的粒度
    在thr_lock.h中,定义了Mysql Server层的锁的粒度.
#+BEGIN_SRC plantuml :file images/transaction_thr_lock_type.png :cmdline -charset utf-8
enum thr_lock_type {
    TL_IGNORE  = -1;
    TL_UNLOCK,
    TL_READ_DEFAULT,
    TL_READ,//读锁
    TL_READ_HIGH_SHARED_LOCKS,//
}
#+END_SRC
*** 重要的数据结构
    innoDB的row0mysql.h中定义了一些重要的结构体,存放了一个表的元组操作相关的一些重要信息,这个结构起了cache作用,其主要作用还是汇集row上的相关操作
    其他三个重要的结构体,属于mysql server层
#+BEGIN_SRC plantuml :file images/transaction_mysql_lock.png :cmdline -charset utf-8
class st_mysql_lock <<struct>> {
  TABLE **table;
  uint table_count,lock_count;
  THR_LOCK_DATA **locks;
}
#+END_SRC
    线程Session中锁整体相关信息
#+BEGIN_SRC plantuml :file images/x.png :cmdline -charset utf-8
class st_thr_lock_data <<struct>> {
  THR_LOCK_INFO *owner;//属主要哪个线程,隶属哪个session
  struct st_thr_lock_data *next,**prev;//前后指针
  struct st_thr_lock *lock;
  mysql_cond_t *cond;
  enum thr_lock_type type;//锁的粒度
  void *status_param;			/* Param to status functions */
  void *debug_print_param;
  struct PSI_table *m_psi;

}

class st_thr_lock{
  LIST list;
  mysql_mutex_t mutex;
  struct st_lock_list read_wait;//等待本线程Session的读等待
  struct st_lock_list read;//本线程Session所有读锁
  struct st_lock_list write_wait;//等待本线程session的写等待
  struct st_lock_list write;//本线程session所有写锁

}

#+END_SRC
*** InnoDB对接Mysql Server
