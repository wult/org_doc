
** 10.2 事务管理基础
***  事务状态
#+BEGIN_SRC plantuml :file images/transaction_trx_state.png :cmdline -charset utf-8
enum trx_state_t {
	TRX_STATE_NOT_STARTED, //没有事务,即事务没有开始
	TRX_STATE_FORCED_ROLLBACK, //事务被回滚,这是从ACTIVE状态变迁过来。并发机制经常会通过主动回滚事务来防止数据不一致
	TRX_STATE_ACTIVE,//处于ACTIVE状态，表明事务正在执行过程中
	TRX_STATE_PREPARED,//事务提交阶段,为支持XA，引入2PC技术,这是2PC第一阶段即PREPARE阶段
	TRX_STATE_COMMITTED_IN_MEMORY//事务已提交,只有事务被设置为提交标识后,才可以释放锁等资源，这是SS2PL定义的
}

enum trx_que_t {
  TRX_QUE_RUNNING,		/*!< transaction is running */
	TRX_QUE_LOCK_WAIT,		/*!< transaction is waiting for a lock */
	TRX_QUE_ROLLING_BACK,		/*!< transaction is rolling back */
	TRX_QUE_COMMITTING		/*!< transaction is committing */
}

trx_que_t --> trx_state_t
#+END_SRC
以上文件位于trx0types.h
*** 表示事务的数据结构
    事务的数据结构中,把事务的属性如隔离级别和事务状态,与并发相关的锁如MVCC机制的快照隔离,UNDO日志关联起来
#+BEGIN_SRC plantuml :file images/transaction_trx_t.png :cmdline -charset utf-8
class trx_t <<struct>> {
    bool abort;//事务被Abort
    trx_id_t id;//事务的标识,事务ID
    trx_id_t no;//事务的序列号
    trx_state_t state;//事务的状态
    ReadView* read_view;//活动事务的快照,与并发控制的MVCC机制关联
    trx_lock_t lock;//事务上的锁信息,与并发控制的封锁机制关联,包括了元数据表和记录锁表
    ulint isolation_level;//事务的隔离级别
    bool is_registered;//有XA协调器注册
    lsn_t commit_lsn;//事务提交时刻的lsn,与REDO日志紧密相关,要求REDO日志遵守WAL规则，事务结束前REDO日志落盘
    que_t* graph;//查询图
    undo_no_t undo_no;//下一个UNDO日志记录号,表示事务被修改或插入的行
    trx_savept_t last_sql_stat_start;//保存点,记录上一个SQL的UNDO日志的记录号
    trx_rsegs_t rsegs;//指向系统表空间和临时表空间,通过表空间与回滚段建立关联
    bool ddl;//如果是DDL语句则内部开启一个子事务完成DDL操作。
    bool internal;//是否是一个内部事务
    XID* xid;//X/Open XA transaction 的标识
}

class trx_rsegs_t <<struct>> {
   trx_undo_ptr_t m_redo;//回滚段,每个事务都有一个回滚段 
   trx_undo_ptr_t m_noredo;//系统的临时表空间
}

class trx_undo_ptr_t <<struct>> {
    trx_rseg_t* rseg;//指向内存回滚段
    trx_undo_t* insert_undo;//指向insert undo log
    trx_undo_t* update_undo;//指向update undo log
}

class trx_rseg_t <<struct>> {
    ulint id;//回滚段的标识
    ulint space;//回滚段的头信息在表空间中的位置,表空间标识 
    ulint page_no;//回滚段的头信息在表空间中的位置 ,页号
    page_size_t page_size;/** page size of the relevant tablespace **/
    ulint max_size;//max allowed size in pages;
    ulint curr_size;//current size in pages
    UT_LIST_BASE_NODE_T(trx_undo_t) update_undo_list;/list of update undo logs
    UT_LIST_BASE_NODE_T(trx_undo_t) update_undo_cached;/list of update undo log segments cached for fast reuse

    UT_LIST_BASE_NODE_T(trx_undo_t) insert_undo_list;/list of insert undo logs
    UT_LIST_BASE_NODE_T(trx_undo_t) insert_undo_cached;/list of insert undo log segments cached for fast reuse
}
trx_undo_ptr_t --> trx_rsegs_t
trx_rsegs_t --> trx_t
#+END_SRC
- 表示事务的数据结构是trx_t,在事务的结构体中,与并发控制紧密相关的是"ReadView *read_view" 和"trx_lock_t lock"
- 与事务管理相关的是“trx_state_t state”或"ulint isolation_level"等 
- 与事务管理相关的另外一个主要结构体成员是"trx_savept_t last_sql_stat_start",即事务在执行过程中，通过保存点机制使用SQL语句的失败不会导致整个事务回滚，这如同使用栈(但不是栈，可以把一串UNDO日志视为一个逻辑栈)
- 与事务回滚相关的是"trx_rsegs_t rsegs"->"trx_undo_ptr_tm_redo/m_noredo" ->"trx_rseg_t* rseg"
*** redo日志
**** 数据结构    
 redo日志作用:
 - 一是可以作为故障崩溃的时候，做系统恢复使用.以保证已经提交的事务的原子性和持久性。
 - 二是可以作为流的方式实现数据同步和复制的功能(尽管Mysql数据同步和复制是使用binlog)
 #+BEGIN_SRC plantuml :file images/transaction_base_log_t.png :cmdline -charset utf-8
 class log_t <<struct>> {
     lsn_t lsn;//log sequence number
     ulint buf_free;//在日志缓冲中，第一个空闲位置
     byte* buf_ptr;//REDO缓存区相关定义
     byte* buf;//log buffer
     ulint buf_size;//log buffer size in bytes;
     ulint max_buf_free;
     UT_LIST_BASE_NODE_T(log_group_t) log_groups;//日志组
     lsn_t write_lsn; //last written lsn
     lsn_t current_flush_lsn;//end lsn for the current runningwrite flush operation
     lsn_t flushed_to_disk_lsn;//从缓存区到存储，实现REDO的重要标识

 }
 #+END_SRC
**** REDO日志文件的管理方式
     REDO日志从缓存区中被刷出后，保存在日志文件组(group),每个日志文件组至少有两个REDO日志文件，ib_logfile0,ib_logfile1的文件,文件个数可以通过innodb_log_files_in_group参数调节
     每个REDO日志文件大小相同，当文件满了的时候 ,会自动切换到下个日志文件以循环使  每个REDO日志文件大小相同，当文件满了的时候 ,会自动切换到下个日志文件以循环使用.
**** REDO日志与binlog日志的区别
| 比较项     | REDO日志                                               | binglog日志                      |
|------------+--------------------------------------------------------+----------------------------------|
| 记录范围   | 记录事务操作过程中产生的事务日志`                      | 记录Mysql所有存储引擎日志记录    |
| 记录内容   | 记录的关于每个页的更改物理情况                         | 文件记录格式可以为STATEMENT或ROW |
| 写入的时间 | 事务进行的过程中，不断有REDO日志被写入到REDO日志文件中 | 事务提交前进行记录               |
| 记录作用   | 系统故障做恢复，物理复制                               | 逻辑复制                             |
*** Mini-Transaction
    Mini Transaction用于实现事务的执行，REDO日志的写入,页数据刷盘,故障恢复时的页恢复。REDO日志需要基于Mini Transaction
    
    Mini Transaction的数据结构mtr_t表示 ,主要标识日志相关信息以及相关锁信息.
#+BEGIN_SRC plantuml :file images/transaction_base_mtr_t.png :cmdline -charset utf-8
class mtr_t <<struct>> {
   mtr_buf_t  m_memo;
   mtr_buf_t m_log;//管理日志信息
   bool m_made_dirty;//true if mtr has made at least one buffer pool page dirty
   mtr_log_t m_log_mode;//mtr提供四种类型
   file_space_t* m_user_space;//指向mini-transaction修改用户表空间
   file_space_t* m_undo_space;//指向mini-transaction修改UNDO日志空间
   file_space_t* m_sys_space;//指向mini-transaction修改系统表空间
   mtr_state_t m_state;//mtr状态
   mtr_t* m_mtr;//owning mini-transaction
}
#+END_SRC
    Mini Transaction是InnoDB事务处理的最核心部分,是管理引擎内部操作基础
    


