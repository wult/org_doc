** 事务过程
*** 开始事务
**** 事务初始化
     通过调用 trx_init()函数完成事务的初始化工作.在这函数中设置了事务的结构体(trx_t* trx)中的各个元素值(见trx0trx.cc文件)
***** 一。事务工厂TrxFactory调用初始化init()
****** 事务工厂就是事务池,预先创建,初始化好一些事务对象,避免事务对象池频繁创建和删除
****** 事务工厂在InnoDB被初始化时通过innobase_init()->..srv_boot()->..trx_pool_init()逐层实现多个事务池化
****** 被池化的事务通过调用trx_create_low()函数从事务池内获取一个事务,如返回内部某项操作一个事务对象
****** 事务被初始化时候,事务状态被设置为TRX_STATE_NOT_STARTED,表示事务没有开始
****** TrxFactory做初始化init()时，调用 lock_trx_lock_list_init(&trx->lock.trx_locks)初始化这个事务的已表注到的锁的list
****** TrxFactory做初始化init(0时，还调用lock_trx_alloc_locks(trx)为事务初始化这个事务对应的记录锁池(trx->lock.rec_pool)和表锁池(trx->lock.table_pool)
***** 二是用于系统恢复时，调用trx_free_resurrected()->trx_init()实现事务初始状态设置
***** 三是事务提交或回滚之后,在某个session上事务c地象被重新初始化,以备后用
**** 事务启动
    事务的启动函数比较简单,根据用户命令做简单区分,然后设置事务的基本属性信息,如读写事务分配回滚段,对于只读事务进行事务ID的分配等.trx_start_low()
**** 提交事务
***** 事务提交整体过程
***** ha_commit_low 
      Server层通过handle接口对底层存储进行事务管理操作,通过函数指针ht->commit()调用Innodb的innobase_commit函数
***** innobase_commit
      1. 调用innobase_commit_low()完成事务提交(设置事务提交标志并释放事务相关的锁)
      2. 调用trx_commit_complete_for_mysql()刷出日志
      方法实现见ha_innodb.cc
***** innobase_commit_low
      调用trx_commit_for_mysql()完成事务提交
***** trx_commit_for_mysql
      1. 根据事务的状态，执行不同的操作调用trx_commit是因为事务的状态需要从TRX_STATE_PREPRED或TRX_STATE_ACTIVE转变为TRX_STATE_COMMITTED_IN_MEMORY
***** trx_commit
      1. 调用trx_commit_low()完成事务
      2. 也会被trx_rollback_finish()调用,用于回滚操作
***** trx_commit_low
      1. 释放锁Mini-Transaction事务提交
      2. 调用trx_commit_in_memory()完成事务在内存中的提交操作
***** trx_commit_in_memory
      1. 调用lock_trx_release_locks()释放锁
      2. 断言事务的状态是在内存中已经完成(标志是上一步完成设置的)
      3. 调用trx_undo_insert_cleanup()释放插入的UNDO日志
      4. 生成新的lsn
      5. 根据innodb_flush_log_at_trx_commit参数值的情况确定是否调用trx_flash_log_if_needed() 刷出日志到物理存储
      6. 如果是回滚操作,则为回滚操作设置一些值,如设置事务状态为宏TRX_STATE_FORCED_ROLLBACK
      7. 重新初始化事务对象结构体值以备再用
      
#+BEGIN_SRC bt
insert过程中的read:
#+END_SRC
**** 事务ID管理 
      InnoDB引擎需要使用事务ID区分事务，对于事务ID的管理方式有其生命周期
      
      首先是事务ID的初始化,这是InnoDB引擎启动时需要为整个引擎完整准备环境(如各种数据结构化初始化,缓存区准备,元数据加载)的步骤之一,所以在引擎启动时,从外存加载上次系统生命周期内最大的事务ID，然后增加一段空余范围，生成新的事务ID供本次生命周期使用,通过trx_sys_init_at_db_start()函数完成.
      其次每个新事务需要获取事务ID，这是通过trx_sys_get_new_trx_id()函数完成,大部分情况下是通过trx_start_low()函数调用.
***** 事务ID作用
- 作为标志写入日志,如调用row_upd_write_sys_vals_to_log()写REDO日志
- 标识对象生命状态与事务关系：如调用dict_build_index_def_step()标识索引是被本次生命周期(系统从启动到停止为一个生命周期)内某个事务创建还是在其他什么周期则创建
- 被用于检测某个事务的存活状态:如调用trx_rw_is_active_low()
- 被用于MVCC技术中求解事务快照,如调用ReadView::prepare(trx_id_t id)
- 被用于统计信息中:如调用row_update_for_mysql_using_upd_graph()再调用srv_stats.n_rows_deleted.add((size_t)trx->id,1)对某个事务删除操作进行统计(所使用到的"srv_stats_stats"是内部的全局计数器)
- 被用于并发控制技术中,如调用row_unlock_for_mysql()函数判断是否无级是否可以解锁
- 被用于系统恢复中：如调用trx_resurrect_insert()从UNDO日志中恢复事务状态
***** 其他特殊情况
- 读写事务不赋于事务ID
- PURGE事务不赋于事务ID
  


