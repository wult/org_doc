** 锁
*** 锁的粒度
    InnoDB的事务锁,支持四种基本的锁
#+BEGIN_SRC plantuml :file images/transaction_lock_mode.png :cmdline -charset utf-8
enum lock_mode {
	LOCK_IS = 0,	/* intention shared 意向共享锁*/ 
	LOCK_IX,	/* intention exclusive 意向排它锁*/
	LOCK_S,		/* shared 共享锁*/
	LOCK_X,		/* exclusive 排它锁*/
	LOCK_AUTO_INC,	//自增锁
	LOCK_NONE,	//
	LOCK_NUM = LOCK_NONE, /* number of lock modes */
	LOCK_NONE_UNSET = 255
}

#+END_SRC
*** 锁的种类
#+BEGIN_SRC 
##见lock0lock.h
#define LOCK_ORDINARY	0	/*!< this flag denotes an ordinary
				next-key lock in contrast to LOCK_GAP
				or LOCK_REC_NOT_GAP */
//间隙锁记录之前的间隙被锁定,阻止记录被修改,也阻止记录前间歇被插入
#define LOCK_GAP	512	/*!< when this bit is set, it means that the
				lock holds only on the gap before the record;
				for instance, an x-lock on the gap does not
				give permission to modify the record on which
				the bit is set; locks of this type are created
				when records are removed from the index chain
				of records */
//记录被锁定,记录之前的间隙不被锁定
#define LOCK_REC_NOT_GAP 1024	/*!< this bit means that the lock is only on
				the index record and does NOT block inserts
				to the gap before the index record; this is
				used in the case when we retrieve a record
				with a unique key, and is also used in
				locking plain SELECTs (not part of UPDATE
				or DELETE) when the user has set the READ
				COMMITTED isolation level */
//插入意见锁        
#define LOCK_INSERT_INTENTION 2048 /*!< this bit is set when we place a waiting
				gap type record lock request in order to let
				an insert of an index record to wait until
				there are no conflicting locks by other
				transactions on the gap; note that this flag
				remains set when the waiting lock is granted,
				or if the lock is inherited to a neighboring
				record */
#define LOCK_PREDICATE	8192	/*!< Predicate lock */
#define LOCK_PRDT_PAGE	16384	/*!< Page lock */


#+END_SRC

