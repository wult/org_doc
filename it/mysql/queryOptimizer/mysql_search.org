#+OPTIONS: ^:{} toc:nil
** Mysql查询执行过程
*** 查询执行过程   
**** 语法分析阶段
     将sql查询语句变换成为一查查询树st_select_lex传给优化器,并对sql表达语义进行检查
**** 生成逻辑查询执行计划阶段
     遍历查询树,确定关系是否是常量表,为每个关系查找可用索引,运用关系代数原理和启发式规则优化
**** 生成物理查询执行计划阶段
     对每个关系尽量利用索引计算其代价,找出代价最小的路径后保存到JOIN类的best_positions
**** 执行查询执行计划阶段
*** 查询过程类
**** sql_parse.cc
     词法分析，语法分析,语义检查
**** sql_resolver.cc
     JION.prepare预处理
**** sql_optimizer.cc
     JOIN.optimize查询优化
     还会作代价估算器，统计信息
***** sql_optimizer.cc
      逻辑优化
***** sql_planner.cc
      greedy_search 物理优化
**** sql_executor.cc
     JOIN.exec执行器
**** 执行结果
** 表数据的访问方式
*** 常量表   
- system表: 表中只有一行数据
- const表: 经where语句中限制条件(column=常数)筛选后只有一行数据，这表明column列上有索引，而且索引可能是主键列或唯一列,结果是0行或1行
代码表示方式可参考:sql_opt_exec_shared.h的 enum join_type
| 类型            | 代码表示方式       | 说明                                                                                                                                 |
|-----------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------|
| system          | JT_SYSTEM          | 常量表情况一,表上只有一条元组匹配                                                                                                    |
| const           | JT_CONST           | 常量表情况二,最多有一条元组匹配                                                                                                      |
| eq_ref          | JT_EQ_REF          | 参与连接运算的表,且是内表.基于索引(连接字段上存在唯一索引或主键索引，且操作符是"="的谓词,连接字段不能为NULL)做扫描, 使得对外表的一条元组内表只有一条元组与之对应                 |
| ref             | JT_REF             | 可用于单表扫描或连接 ,参与连接运算的表是内表.基于索引(连接字段索引是非唯一索引,操作符是"="，)，使用外表一条元组,内表可有若干元组对应 |
| ref_or_null     | JT_REF_OR_NULL     | 类似ref,只是搜索条件条件包括: 连接字段值可为NULL的情况,如where col=xx or col is null                                                 |
| range           | JT_RANGE           | 范围扫描,基于索引做范围，为诸如between ,in ,>=,like类操作提供支持                                                                    |
| index           | JT_INDEX_SCAN      | 索引做扫描,基于索引在索引的叶子结点上找满足条件的数据(不需要访问数据文件)                                                            |
| ALL             | JT_ALL             | 全表扫描或范围扫描,不使用索引,顺序扫描                                                                                               |
| unique_subquery | JT_UNIQUE_SUBQUERY | 在子查询中，基于唯一索引进行扫描,类似 eq_ref                                                                                         |
| index_subquery  | JT_INDEX_SUBQUERY  | 在子查询中，基于除唯一索引之外索引进行扫描                                                                                           |
| index_merge     | JT_INDEX_MERGE     | 在2个及2个以上索引存在且可用时，查询可以使用多个索引进行查找,然后 通过交集或并集合查询结果                                           |
|                 | JT_FT              | FT,FullText全文检索                                                                                                                      |

** 主要的类和数据结构
*** 查询树
#+BEGIN_SRC plantuml :file images/st_select_lex.png :cmdline -charset utf-8
class st_select_lex{
    .. select 语句的各子句 ..
    {field} *where : Item //where子句
    {field} *having : Item //having子句
    {field} table_list : SQL_I_List<TABLE_LIST> //from子句中的表对象
    {field} group_list : SQL_I_List<ORDER> //group by 子句中的表对象
    {field} order_list : SQL_I_List<ORDER> //order by  子句中的表对象
    {field} *select_limit : Item //limit 起始
    {field} *offset_limit : Item //limit 偏移
    .. 连接相关 ..
    {field} *join : JOIN //连接树
    {field} *top_join_list : List<TABLE_LIST> //顶层的连接链表
    {field} *join_list : List<TABLE_LIST> //当前被分析的连接链表
    {field} *sj_nests : List<TABLE_LIST> //半连接嵌套链表
    {field} *leaf_tables : TABLE_LIST //基本表,从SQL查询语句中分解出的基表
    .. 查询树的一些方法 ..
    {method} *add_table_to_list() : TABLE_LIST
    {method} *nest_last_join(THD *thd) : TABLE_LIST
}
note left: 查询语法树

class TABLE_LIST <<struct>>{
    {field} *db : char //数据库名称
    {field} *alias : char //别名
    {field} *table_name : char //名称
    {field} *schema_table_name : char //模式名
    {field} *prep_join_cond : Item //连接条件,查询优化后，可能会变化
    {field} *cond_equal : COND_EQUAL //外连接条件
    {field} *select_lex : st_select_lex //指向语法树
    {field} *view_tables : List<TABLE_LIST> //视图相关信息
    {field} *security_ctx : Security_context //安全上下文
    {field} lock_type : thr_lock_type //表对象上的锁信息
    {field} cacheable_table : bool //是否被缓存

}

note right : 查询关系表

st_select_lex *-- TABLE_LIST
st_select_lex_node <|--st_select_lex
#+END_SRC

**** st_select_lex
     语法分析器的结果是查询树,使用st_select_lex类表示 
     st_select_lex定义位于sql_lex.h文件,主要表示语法分析器的结果：查询树
**** TABLE_LIST
     查询关系表,位于table.h,关系表存放很多信息,有查询优化阶段需要的
*** 索引类
#+BEGIN_SRC plantuml :file images/key.png :cmdline -charset utf-8
class Key{
    {field} type : Keytype //索引类型,如唯一,主键,外键等 
    {field} key_create_info : KEY_CREATE_INFO //索引元信息,如索引算法,名称..
    {field} columns : List<Key_part_spec> //索引列信息,如列的名称,长度等 
    {field} name : LEX_STRING
}

enum Keytype {
    PRIMARY
    UNIQUE
    MULTIPLE
    FULLTEXT
    SPATIAL
    FOREIGN_KEY
}
note left : 分别为主键索引,唯一索引,多重索引,全文索引,空间索引

enum ha_key_alg{
    {field} HA_KEY_ALG_UNDEF 
    {field} HA_KEY_ALG_BTREE  //B-tree算法
    {field} HA_KEY_ALG_RTREE  //R-tree算法
    {field} HA_KEY_ALG_HASH   //Hash算法
    {field} HA_KEY_ALG_FULLTEXT //全文索引
}

class st_key_create_information <<struct>>{
    {field} algorithm : ha_key_al //索引算法
    {field} block_size : ulong
    {field} parser_name : LEX_STRING 
}

note right : 索引元信息,结构体的别名:KEY_CREATE_INFO

class Key_part_spec{
    {field} field_name : LEX_STRING //列名
    {field} length : unit
}

note left : 索引列信息


Sql_alloc <|-- Key
Key *--Keytype
st_key_create_information *-- ha_key_alg
Key *-- st_key_create_information
Sql_alloc <|-- Key_part_spec
#+END_SRC
*** 连接表
    连接表介于关系(TABLE_LIST类),与连接类(JOIN类)之间一个过渡对象,存放关系一些相关信息,也存放了连接操作操作的一些信息,所以称为连接表
#+BEGIN_SRC plantuml :file images/st_join_table.png :cmdline -charset utf-8
class st_join_table <<struct>>{
    {field} *table TABLE 
    {field} *positions : POSITION //指向JOIN类的best_positions
    {field} *keyuse : Key_use //指向第一个可使用的索引
    {field} *select : SQL_SELECT //获取数据的相关信息
    {field} *m_condition : Item //条件子句
    {field} *quick : QUICK_SELECT_I //根据索引快速获取元组的方式
    {field} **on_expr_ref : Item //JOIN/ON条件表达式
    {field} *cond_equal : COND_EQUAL //JOIN/ON条件表达式中的"等式"
    {field} *first_inner : st_join_table //指向连接的第一个内表
    {field} found_records : ha_rows //被扫描的记录行数,不是返回结果行数
    {field} read_time : ha_rows //使用JT_ALL,JT_RANGE,JT_INDEX_MERGE访问表花费
    {field} use_quick : quicktype //快速查找的类型
    {field} type :join_type  //扫描表的方式
    {field} *join : JOIN //存放在连接关系上的局部连接树
}
note right : 别名: JOIN_TAB
#+END_SRC
*** 连接类(JOIN)
    JOIN类主要操作对应查询语句连接关系内容,是优化和执行的基本单位,也是优化结果(查询执行计划)的储存对象,本类在文件: sql_optimizer.h中
#+BEGIN_SRC plantuml :file images/join.png :cmdline -charset utf-8
class JOIN{
    JOIN_TAB *join_tab,**best_ref //存放连接中所有的连接关系对象
    JOIN_TAB **map2table //位图,标识表在连接(JOIN)位置
    unit tables //在查询块中出现的基表个数
    unit primary_tables //查询块中出现主要的表的个数(包括物化临时表)
    unit const_tables //常量表的个数
    unit tmp_tables //临时表的个数
    POSITION *best_positions //构成当前连接(JOIN)最优表的连接次序
    POSITION *positions //当前路径.在求解最优路径(best_positions)过程中，表示某一刻的一个路径
    double best_read //最优查询路径对应的最小花费
    select_result *result //查询结果集
    MYSQL_LOCK *lock //锁信息
    SELECT_LEX_UNIT *unit //进行集合操作的查询语句
    SELECT_LEX *select_lex //语法分析之后得到的查询树
    Key_use_array keyuse //索引
    List<Item> all_fields //查询语句中所有表达式

    Item *conds //where子句
    Item *having //having子句
    
    int prepare() //准备阶段,主要完成语法分析,部分子查询优化工作
    int optimize()//正式优化阶段,使用逻辑,物理优化的方式,进行查询各种操作估算
    void exec()//得到查询执行计划,按计划执行查询
}

note right of JOIN
*best_position:最后优化结果，意味最终最优查询执行计划。
多表连接，每个表在什么位置(即以什么样次序与其他表连接)，会有个最优次序(代价花费最少)
这个次序存放在best_positions数组中
end note

Sql_alloc <|-- JOIN
#+END_SRC
*** 约束条件
    约束条件是指Where或join/on或having子句谓词表达式,分两种,一种是限制条件,用来过滤元组;另一种是连接条件,满足连接条件的元组才会连接,连接条件表达式一般包括两个或两个以上的关系的常量 ,该类在:item.h中

    Mysql用Item类表示约束条件表达式,这是一个父类,由一系列子类继承这个父类,Item_equal类与Item类之间的关系如下图所示:
#+BEGIN_SRC plantuml :file images/item.png :cmdline -charset utf-8
class Item{

}

class COND_EQUAL{
    unit max_members;//本层及本层以下的成员个数
    COND_EQUAL *upper_levels//上层所有等值判断约束条件
    List<Item_equal> current_level //当前等式表达式
}

class Item_equal{
    List<Item_field> fields //表达式的因子
    Item *const_item //常量因子
}


Sql_alloc <|-- COND_EQUAL
Item <|-- Item_result_field
Item_result_field <|-- Item_func
Item_func <|-- Item_int_func
Item_int_func <|-- Item_bool_func
Item_bool_func <|-- Item_equal
#+END_SRC

