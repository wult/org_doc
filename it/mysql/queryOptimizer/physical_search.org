** 查询代价估算
*** 代价模型
    查询代价估算基于CPU代价和IO代价
#+BEGIN_SRC 
总代价=IO代价 + CPU代价
COST = P*a_page_cpu_time +W*T
#+END_SRC
- P为计划运行时访问的页面数, a_page_cpu_time是每个页面读取的时间花费,其乘积反映IO花费
- T为访问的元组数,反映CPU花费(存储是以页面为单位,数据以页面形式读入内存,每个页面上可能有多条元组,访问元组需要解析元组结构,才能把元组上字段读出,这消耗的是CPU).如果索引扫描,则还会包括索引读取的花费
- W为权生因子,表明IO到CPU相关性，又称选择率，选择率用于表示在关系R中，满足条件"A op a "的元组数与N的比值.
*** 选择率计算常用方法
**** 无参数方法
**** 参数法
**** 曲线拟合法
**** 抽样法
**** 综合法
** 单表扫描算法
*** 顺序扫描(SeqScan)
*** 索引扫描(IndexScan)
*** 只读索引扫描(IndexOnlyScan)
*** 行扫描(RowIdScan)
*** 并行表扫描(ParallelIndexScan)
*** 组合多个索引扫描(MultipleIndexScan)
** 单表扫描代价计算
| 扫描方式 | 代价估算公式                                      |
|----------+---------------------------------------------------|
| 顺序扫描 | N_page*a_tuple_IO_time + N_tuple*a_tuple_CPU_time |
| 索引扫描 | C_index + N_page_index*a_tuple_IO_time            |
- a_page_IO_time: 一个页面IO花费
- N_page:数据页面数
- N_page_index:索引页面数
- a_tuple_CPU_time:一个元组从页面中解析的CPU花费
- N_tuple:元组数
- C_index:索引的IO花费，C_index = N_page_index * a_page_IO_time
- N_tuple_index:索引作用下的可用元组数,N_tuple_index = N_tuple*索引选择率
** 两表连接算法
*** 连接操作代价计算
| 算法         | 代价估算公式                                            |
|--------------+---------------------------------------------------------|
| 嵌套循环连接 | 基本嵌套循环连接: C-outer+C-inner                       |
|              | 内表使用索引改进嵌套循环: C-outer+C-inner-index         |
|--------------+---------------------------------------------------------|
| 归并         | 基本的归并连接: C-outer+C-inner+C-outersort+C-innersort |
|              | 内外表使用索引,只影响排序,C-outsort,C-innersort可能变化 |
|--------------+---------------------------------------------------------|
| Hash连接     | C-createhash+(N-outer*N-inner*选择率)*a_tuple_cpu_time     |
- a_tuple_cpu_time:获取一个元组消耗的CPU时间
- N-outer:扫描获取外表元组数
- N-inner:扫描获取内表元组数,N-inner=N-inner-all*选择率，其中N-inner-all表示内表的所有元组数
- C-outer:扫描外表的代价,C-outer=N-outer*a_tuple_cpu_time
- C-inner:扫描内表的代价,C-inner=N-inner*a_tuple_cpu_time
- C-inner-index: 使用索引扫描内表代价，通常C-inner-index会小于C-inner
- C-outersort: 外表排序的代价
- C-innersort: 内表排序的代价
- C-createhash: 创建hash的代价
** 多表连接算法
*** 动态规划(dynamic programming)
**** 初始状态
     构造第一层关系,即叶子结点,每个叶子对应一个单表,为每一个待连接的关系计算最优路径(通过评估不同的单表的数据扫描方式花费，找出代价最小的作为每个单表的局部最优路径)
**** 归纳
     当层数从第1到n-1，假设已生成，则如何求解第n层关系,方法为将第n-1层关系与第一层中的每个关系连接,生成新的关系(对新关系进行估算),放于第n层,且每一个新关系，均求解其最优路径
*** 启发式方法(heuristic algorithm)
    启发式算法是相对最优化算法提出的,是一个基于直观或经验构造的算法
    启发式一直贯穿整个查询优化阶段,逻辑查询优化阶段或物理查询优化阶段，都有启发规则可用.
*** 贪婪算法(Greedy)
    mysql的多表连接采用了这种算法
