** 大小端
*** 概念   
- 小端字节序: 数值的低字节放在内存的低地址处，数值的高字节放在内存高地址(低的位数反而放在前面)
- 大端字节充: 数值的低字节放在内存的高地址处，数值的高字节放在内存低地址
*** 优缺点
- 小端: 因为低位在低字节，强制转换数据开时不需要再调整字节
- 大端: 有符号数，其字节最高位不仅表示数值本身，还起到了符号的作用。符号固定为第一字节，也就是最高位占据最低地址,符号直接可以取出来，容易判断正负
  
*** CPU字节序如下:
- 大端: IBM,SUM,POWERPC
- 小端: X86,DEC
  
ARM体系CPU大小端字节通吃，具体由硬件选择.

字节序不仅是在CPU访问内存中的概念，而且也包括在文件存储和网络传输中。

BMP格式图片是属于小端字节序，JPEG为大端。

网络字节序就是使用大端字节序，所以X86架构程序在发送网络数据时，要转换字节顺序.

*** BIOS,DOS,LINUX中断的区别
    中断向量表中每个中断向量大小是4字节，这4字节描述了一个中断处理例程的段基址和段内偏移地址.中断向量表的长度是1024字节，故该表最多容纳256个中断向量处理程序。计算机启动之初，中断向量表中的中断例程是由BIOS建立的，它从物理内存地址0x0000处初始化并在中断向量表中添加各种处理例程

**** CPU访问外设的ROM
- 内存映射: 通过地址总线将外设自己的内存映射到某个内存区域(并不是映射到主板插的内存条上)
- 端口操作: 外设都有自己的控制器,控制器上有寄存器,这些寄存器就是所谓的端口,通过in/out指令读写端口来访问硬件的内存
  
  从内存的物理地址0xA0000开始到0xFFFFF这部分内存中，一部分是专门用来做映射的，如果硬件存在，硬件自己的ROM会被映射到这片内存中的某处.
  
  BIOS在运行期间会扫描0xC0000到0xE0000之间的内存，若在某个区域发现前两个字节是: 0x55和0xAA，这就意味这区域对应的rom中有代码存在,再对该区域做累加和检查，若结果与第3个字节的值相符，说明代码无误，就从第4个字节进入.这时开始执行硬件自带的例程以初始化硬件自身。最后BIOS填写中断向量表中相关规定，使它们指向自带的例程

*** 操作系统如何识别文件系统的
文件系统有自己的魔数。各分区都有超级块，一般位于本分区的第2个扇，比如若各分区的扇区以0开始索引，其第一个扇区便是超级块的起始扇区，超级块里面记录了此分区的信息，其中 就有文件系统的魔数。

*** MBR,EBR,DBR,OBR各是什么
    BIOS只完成一些简单的检测初始化工作,然后找机会把处理器使用权交出云，下一棒是MBR，为了方便BIOS找到MBR，MBR必须在固定的位置等待，因此MBR位于硬盘的最开始扇区
    
    MBR是主导记录，master或 main boot record,它存于硬盘最开始那个扇区即0盘0道0区,这个扇区称为MBR引导扇区.注意这里用CHS方式表示MBR引导扇区的地址,因此扇区地址以1开始,LBA方式是以0为起始扇区编址,一般扇区大小是512字节.

    MBR引导扇区内容是:
- 446字节引导程序及参数
- 64字节的分区表
- 2字节结束标记0x55和0xaa

MBR引导扇区除了引导程序外，还有64字节大小的分区表,里面是分区信息。分表中每个分区表项占16字节，因此MBR分区表可容纳4个分区，这4个分区就是"次引导程序"候选人群。

次引导程序就是操作系统提供的加载器，因此MBR引导程序的任务就是把控制权交给操作系统加载器，由该加载器完成操作系统的自举,最终使控制权交付给操作系统内核。

MBR最想云看的是内核加载器，为了MBR方便找到活动分区上的内核加载器，内核加载器入口地址必须在固定的位置，这个位置就是各分区最开始的扇区，这个"各分区起始的扇区"中存放的是操作系统引导记录OBR，即OS BOOT Record.此扇区也称为OBR引导扇区。在OBBR引导扇区前3个字节存放了跳转指令


